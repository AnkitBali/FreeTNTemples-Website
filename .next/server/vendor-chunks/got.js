"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/got";
exports.ids = ["vendor-chunks/got"];
exports.modules = {

/***/ "(ssr)/./node_modules/got/index.js":
/*!***********************************!*\
  !*** ./node_modules/got/index.js ***!
  \***********************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst EventEmitter = __webpack_require__(/*! events */ \"events\");\nconst http = __webpack_require__(/*! http */ \"http\");\nconst https = __webpack_require__(/*! https */ \"https\");\nconst PassThrough = (__webpack_require__(/*! stream */ \"stream\").PassThrough);\nconst urlLib = __webpack_require__(/*! url */ \"url\");\nconst querystring = __webpack_require__(/*! querystring */ \"querystring\");\nconst duplexer3 = __webpack_require__(/*! duplexer3 */ \"(ssr)/./node_modules/duplexer3/index.js\");\nconst isStream = __webpack_require__(/*! is-stream */ \"(ssr)/./node_modules/is-stream/index.js\");\nconst getStream = __webpack_require__(/*! get-stream */ \"(ssr)/./node_modules/get-stream/index.js\");\nconst timedOut = __webpack_require__(/*! timed-out */ \"(ssr)/./node_modules/timed-out/index.js\");\nconst urlParseLax = __webpack_require__(/*! url-parse-lax */ \"(ssr)/./node_modules/url-parse-lax/index.js\");\nconst lowercaseKeys = __webpack_require__(/*! lowercase-keys */ \"(ssr)/./node_modules/lowercase-keys/index.js\");\nconst isRedirect = __webpack_require__(/*! is-redirect */ \"(ssr)/./node_modules/is-redirect/index.js\");\nconst unzipResponse = __webpack_require__(/*! unzip-response */ \"(ssr)/./node_modules/unzip-response/index.js\");\nconst createErrorClass = __webpack_require__(/*! create-error-class */ \"(ssr)/./node_modules/create-error-class/index.js\");\nconst isRetryAllowed = __webpack_require__(/*! is-retry-allowed */ \"(ssr)/./node_modules/is-retry-allowed/index.js\");\nconst Buffer = (__webpack_require__(/*! safe-buffer */ \"(ssr)/./node_modules/safe-buffer/index.js\").Buffer);\nconst pkg = __webpack_require__(/*! ./package */ \"(ssr)/./node_modules/got/package.json\");\nfunction requestAsEventEmitter(opts) {\n    opts = opts || {};\n    const ee = new EventEmitter();\n    const requestUrl = opts.href || urlLib.resolve(urlLib.format(opts), opts.path);\n    let redirectCount = 0;\n    let retryCount = 0;\n    let redirectUrl;\n    const get = (opts)=>{\n        const fn = opts.protocol === \"https:\" ? https : http;\n        const req = fn.request(opts, (res)=>{\n            const statusCode = res.statusCode;\n            if (isRedirect(statusCode) && opts.followRedirect && \"location\" in res.headers && (opts.method === \"GET\" || opts.method === \"HEAD\")) {\n                res.resume();\n                if (++redirectCount > 10) {\n                    ee.emit(\"error\", new got.MaxRedirectsError(statusCode, opts), null, res);\n                    return;\n                }\n                const bufferString = Buffer.from(res.headers.location, \"binary\").toString();\n                redirectUrl = urlLib.resolve(urlLib.format(opts), bufferString);\n                const redirectOpts = Object.assign({}, opts, urlLib.parse(redirectUrl));\n                ee.emit(\"redirect\", res, redirectOpts);\n                get(redirectOpts);\n                return;\n            }\n            setImmediate(()=>{\n                const response = typeof unzipResponse === \"function\" && req.method !== \"HEAD\" ? unzipResponse(res) : res;\n                response.url = redirectUrl || requestUrl;\n                response.requestUrl = requestUrl;\n                ee.emit(\"response\", response);\n            });\n        });\n        req.once(\"error\", (err)=>{\n            const backoff = opts.retries(++retryCount, err);\n            if (backoff) {\n                setTimeout(get, backoff, opts);\n                return;\n            }\n            ee.emit(\"error\", new got.RequestError(err, opts));\n        });\n        if (opts.gotTimeout) {\n            timedOut(req, opts.gotTimeout);\n        }\n        setImmediate(()=>{\n            ee.emit(\"request\", req);\n        });\n    };\n    get(opts);\n    return ee;\n}\nfunction asPromise(opts) {\n    return new Promise((resolve, reject)=>{\n        const ee = requestAsEventEmitter(opts);\n        ee.on(\"request\", (req)=>{\n            if (isStream(opts.body)) {\n                opts.body.pipe(req);\n                opts.body = undefined;\n                return;\n            }\n            req.end(opts.body);\n        });\n        ee.on(\"response\", (res)=>{\n            const stream = opts.encoding === null ? getStream.buffer(res) : getStream(res, opts);\n            stream.catch((err)=>reject(new got.ReadError(err, opts))).then((data)=>{\n                const statusCode = res.statusCode;\n                const limitStatusCode = opts.followRedirect ? 299 : 399;\n                res.body = data;\n                if (opts.json && res.body) {\n                    try {\n                        res.body = JSON.parse(res.body);\n                    } catch (e) {\n                        throw new got.ParseError(e, statusCode, opts, data);\n                    }\n                }\n                if (statusCode < 200 || statusCode > limitStatusCode) {\n                    throw new got.HTTPError(statusCode, opts);\n                }\n                resolve(res);\n            }).catch((err)=>{\n                Object.defineProperty(err, \"response\", {\n                    value: res\n                });\n                reject(err);\n            });\n        });\n        ee.on(\"error\", reject);\n    });\n}\nfunction asStream(opts) {\n    const input = new PassThrough();\n    const output = new PassThrough();\n    const proxy = duplexer3(input, output);\n    if (opts.json) {\n        throw new Error(\"got can not be used as stream when options.json is used\");\n    }\n    if (opts.body) {\n        proxy.write = ()=>{\n            throw new Error(\"got's stream is not writable when options.body is used\");\n        };\n    }\n    const ee = requestAsEventEmitter(opts);\n    ee.on(\"request\", (req)=>{\n        proxy.emit(\"request\", req);\n        if (isStream(opts.body)) {\n            opts.body.pipe(req);\n            return;\n        }\n        if (opts.body) {\n            req.end(opts.body);\n            return;\n        }\n        if (opts.method === \"POST\" || opts.method === \"PUT\" || opts.method === \"PATCH\") {\n            input.pipe(req);\n            return;\n        }\n        req.end();\n    });\n    ee.on(\"response\", (res)=>{\n        const statusCode = res.statusCode;\n        res.pipe(output);\n        if (statusCode < 200 || statusCode > 299) {\n            proxy.emit(\"error\", new got.HTTPError(statusCode, opts), null, res);\n            return;\n        }\n        proxy.emit(\"response\", res);\n    });\n    ee.on(\"redirect\", proxy.emit.bind(proxy, \"redirect\"));\n    ee.on(\"error\", proxy.emit.bind(proxy, \"error\"));\n    return proxy;\n}\nfunction normalizeArguments(url, opts) {\n    if (typeof url !== \"string\" && typeof url !== \"object\") {\n        throw new Error(`Parameter \\`url\\` must be a string or object, not ${typeof url}`);\n    }\n    if (typeof url === \"string\") {\n        url = url.replace(/^unix:/, \"http://$&\");\n        url = urlParseLax(url);\n        if (url.auth) {\n            throw new Error(\"Basic authentication must be done with auth option\");\n        }\n    }\n    opts = Object.assign({\n        protocol: \"http:\",\n        path: \"\",\n        retries: 5\n    }, url, opts);\n    opts.headers = Object.assign({\n        \"user-agent\": `${pkg.name}/${pkg.version} (https://github.com/sindresorhus/got)`,\n        \"accept-encoding\": \"gzip,deflate\"\n    }, lowercaseKeys(opts.headers));\n    const query = opts.query;\n    if (query) {\n        if (typeof query !== \"string\") {\n            opts.query = querystring.stringify(query);\n        }\n        opts.path = `${opts.path.split(\"?\")[0]}?${opts.query}`;\n        delete opts.query;\n    }\n    if (opts.json && opts.headers.accept === undefined) {\n        opts.headers.accept = \"application/json\";\n    }\n    let body = opts.body;\n    if (body) {\n        if (typeof body !== \"string\" && !(body !== null && typeof body === \"object\")) {\n            throw new Error(\"options.body must be a ReadableStream, string, Buffer or plain Object\");\n        }\n        opts.method = opts.method || \"POST\";\n        if (isStream(body) && typeof body.getBoundary === \"function\") {\n            // Special case for https://github.com/form-data/form-data\n            opts.headers[\"content-type\"] = opts.headers[\"content-type\"] || `multipart/form-data; boundary=${body.getBoundary()}`;\n        } else if (body !== null && typeof body === \"object\" && !Buffer.isBuffer(body) && !isStream(body)) {\n            opts.headers[\"content-type\"] = opts.headers[\"content-type\"] || \"application/x-www-form-urlencoded\";\n            body = opts.body = querystring.stringify(body);\n        }\n        if (opts.headers[\"content-length\"] === undefined && opts.headers[\"transfer-encoding\"] === undefined && !isStream(body)) {\n            const length = typeof body === \"string\" ? Buffer.byteLength(body) : body.length;\n            opts.headers[\"content-length\"] = length;\n        }\n    }\n    opts.method = (opts.method || \"GET\").toUpperCase();\n    if (opts.hostname === \"unix\") {\n        const matches = /(.+):(.+)/.exec(opts.path);\n        if (matches) {\n            opts.socketPath = matches[1];\n            opts.path = matches[2];\n            opts.host = null;\n        }\n    }\n    if (typeof opts.retries !== \"function\") {\n        const retries = opts.retries;\n        opts.retries = (iter, err)=>{\n            if (iter > retries || !isRetryAllowed(err)) {\n                return 0;\n            }\n            const noise = Math.random() * 100;\n            return (1 << iter) * 1000 + noise;\n        };\n    }\n    if (opts.followRedirect === undefined) {\n        opts.followRedirect = true;\n    }\n    if (opts.timeout) {\n        opts.gotTimeout = opts.timeout;\n        delete opts.timeout;\n    }\n    return opts;\n}\nfunction got(url, opts) {\n    try {\n        return asPromise(normalizeArguments(url, opts));\n    } catch (err) {\n        return Promise.reject(err);\n    }\n}\nconst helpers = [\n    \"get\",\n    \"post\",\n    \"put\",\n    \"patch\",\n    \"head\",\n    \"delete\"\n];\nhelpers.forEach((el)=>{\n    got[el] = (url, opts)=>got(url, Object.assign({}, opts, {\n            method: el\n        }));\n});\ngot.stream = (url, opts)=>asStream(normalizeArguments(url, opts));\nfor (const el of helpers){\n    got.stream[el] = (url, opts)=>got.stream(url, Object.assign({}, opts, {\n            method: el\n        }));\n}\nfunction stdError(error, opts) {\n    if (error.code !== undefined) {\n        this.code = error.code;\n    }\n    Object.assign(this, {\n        message: error.message,\n        host: opts.host,\n        hostname: opts.hostname,\n        method: opts.method,\n        path: opts.path\n    });\n}\ngot.RequestError = createErrorClass(\"RequestError\", stdError);\ngot.ReadError = createErrorClass(\"ReadError\", stdError);\ngot.ParseError = createErrorClass(\"ParseError\", function(e, statusCode, opts, data) {\n    stdError.call(this, e, opts);\n    this.statusCode = statusCode;\n    this.statusMessage = http.STATUS_CODES[this.statusCode];\n    this.message = `${e.message} in \"${urlLib.format(opts)}\": \\n${data.slice(0, 77)}...`;\n});\ngot.HTTPError = createErrorClass(\"HTTPError\", function(statusCode, opts) {\n    stdError.call(this, {}, opts);\n    this.statusCode = statusCode;\n    this.statusMessage = http.STATUS_CODES[this.statusCode];\n    this.message = `Response code ${this.statusCode} (${this.statusMessage})`;\n});\ngot.MaxRedirectsError = createErrorClass(\"MaxRedirectsError\", function(statusCode, opts) {\n    stdError.call(this, {}, opts);\n    this.statusCode = statusCode;\n    this.statusMessage = http.STATUS_CODES[this.statusCode];\n    this.message = \"Redirected 10 times. Aborting.\";\n});\nmodule.exports = got;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/got/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/got/package.json":
/*!***************************************!*\
  !*** ./node_modules/got/package.json ***!
  \***************************************/
/***/ ((module) => {

module.exports = JSON.parse('{"name":"got","version":"6.7.1","description":"Simplified HTTP requests","license":"MIT","repository":"sindresorhus/got","maintainers":[{"name":"Sindre Sorhus","email":"sindresorhus@gmail.com","url":"sindresorhus.com"},{"name":"Vsevolod Strukchinsky","email":"floatdrop@gmail.com","url":"github.com/floatdrop"}],"engines":{"node":">=4"},"browser":{"unzip-response":false},"scripts":{"test":"xo && nyc ava","coveralls":"nyc report --reporter=text-lcov | coveralls"},"files":["index.js"],"keywords":["http","https","get","got","url","uri","request","util","utility","simple","curl","wget","fetch"],"dependencies":{"create-error-class":"^3.0.0","duplexer3":"^0.1.4","get-stream":"^3.0.0","is-redirect":"^1.0.0","is-retry-allowed":"^1.0.0","is-stream":"^1.0.0","lowercase-keys":"^1.0.0","safe-buffer":"^5.0.1","timed-out":"^4.0.0","unzip-response":"^2.0.1","url-parse-lax":"^1.0.0"},"devDependencies":{"ava":"^0.17.0","coveralls":"^2.11.4","form-data":"^2.1.1","get-port":"^2.0.0","into-stream":"^3.0.0","nyc":"^10.0.0","pem":"^1.4.4","pify":"^2.3.0","tempfile":"^1.1.1","xo":"*"},"xo":{"esnext":true},"ava":{"concurrency":4}}');

/***/ })

};
;