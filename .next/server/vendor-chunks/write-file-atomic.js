"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/write-file-atomic";
exports.ids = ["vendor-chunks/write-file-atomic"];
exports.modules = {

/***/ "(ssr)/./node_modules/write-file-atomic/index.js":
/*!*************************************************!*\
  !*** ./node_modules/write-file-atomic/index.js ***!
  \*************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nmodule.exports = writeFile;\nmodule.exports.sync = writeFileSync;\nmodule.exports._getTmpname = getTmpname // for testing\n;\nvar fs = __webpack_require__(/*! graceful-fs */ \"(ssr)/./node_modules/graceful-fs/graceful-fs.js\");\nvar chain = (__webpack_require__(/*! slide */ \"(ssr)/./node_modules/slide/lib/slide.js\").chain);\nvar MurmurHash3 = __webpack_require__(/*! imurmurhash */ \"(ssr)/./node_modules/imurmurhash/imurmurhash.js\");\nvar extend = Object.assign || (__webpack_require__(/*! util */ \"util\")._extend);\nvar invocations = 0;\nfunction getTmpname(filename) {\n    return filename + \".\" + MurmurHash3(__filename).hash(String(process.pid)).hash(String(++invocations)).result();\n}\nfunction writeFile(filename, data, options, callback) {\n    if (options instanceof Function) {\n        callback = options;\n        options = null;\n    }\n    if (!options) options = {};\n    fs.realpath(filename, function(_, realname) {\n        _writeFile(realname || filename, data, options, callback);\n    });\n}\nfunction _writeFile(filename, data, options, callback) {\n    var tmpfile = getTmpname(filename);\n    if (options.mode && options.chown) {\n        return thenWriteFile();\n    } else {\n        // Either mode or chown is not explicitly set\n        // Default behavior is to copy it from original file\n        return fs.stat(filename, function(err, stats) {\n            if (err || !stats) return thenWriteFile();\n            options = extend({}, options);\n            if (!options.mode) {\n                options.mode = stats.mode;\n            }\n            if (!options.chown && process.getuid) {\n                options.chown = {\n                    uid: stats.uid,\n                    gid: stats.gid\n                };\n            }\n            return thenWriteFile();\n        });\n    }\n    function thenWriteFile() {\n        chain([\n            [\n                writeFileAsync,\n                tmpfile,\n                data,\n                options.mode,\n                options.encoding || \"utf8\"\n            ],\n            options.chown && [\n                fs,\n                fs.chown,\n                tmpfile,\n                options.chown.uid,\n                options.chown.gid\n            ],\n            options.mode && [\n                fs,\n                fs.chmod,\n                tmpfile,\n                options.mode\n            ],\n            [\n                fs,\n                fs.rename,\n                tmpfile,\n                filename\n            ]\n        ], function(err) {\n            err ? fs.unlink(tmpfile, function() {\n                callback(err);\n            }) : callback();\n        });\n    }\n    // doing this instead of `fs.writeFile` in order to get the ability to\n    // call `fsync`.\n    function writeFileAsync(file, data, mode, encoding, cb) {\n        fs.open(file, \"w\", options.mode, function(err, fd) {\n            if (err) return cb(err);\n            if (Buffer.isBuffer(data)) {\n                return fs.write(fd, data, 0, data.length, 0, syncAndClose);\n            } else if (data != null) {\n                return fs.write(fd, String(data), 0, String(encoding), syncAndClose);\n            } else {\n                return syncAndClose();\n            }\n            function syncAndClose(err) {\n                if (err) return cb(err);\n                fs.fsync(fd, function(err) {\n                    if (err) return cb(err);\n                    fs.close(fd, cb);\n                });\n            }\n        });\n    }\n}\nfunction writeFileSync(filename, data, options) {\n    if (!options) options = {};\n    try {\n        filename = fs.realpathSync(filename);\n    } catch (ex) {\n    // it's ok, it'll happen on a not yet existing file\n    }\n    var tmpfile = getTmpname(filename);\n    try {\n        if (!options.mode || !options.chown) {\n            // Either mode or chown is not explicitly set\n            // Default behavior is to copy it from original file\n            try {\n                var stats = fs.statSync(filename);\n                options = extend({}, options);\n                if (!options.mode) {\n                    options.mode = stats.mode;\n                }\n                if (!options.chown && process.getuid) {\n                    options.chown = {\n                        uid: stats.uid,\n                        gid: stats.gid\n                    };\n                }\n            } catch (ex) {\n            // ignore stat errors\n            }\n        }\n        var fd = fs.openSync(tmpfile, \"w\", options.mode);\n        if (Buffer.isBuffer(data)) {\n            fs.writeSync(fd, data, 0, data.length, 0);\n        } else if (data != null) {\n            fs.writeSync(fd, String(data), 0, String(options.encoding || \"utf8\"));\n        }\n        fs.fsyncSync(fd);\n        fs.closeSync(fd);\n        if (options.chown) fs.chownSync(tmpfile, options.chown.uid, options.chown.gid);\n        if (options.mode) fs.chmodSync(tmpfile, options.mode);\n        fs.renameSync(tmpfile, filename);\n    } catch (err) {\n        try {\n            fs.unlinkSync(tmpfile);\n        } catch (e) {}\n        throw err;\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/write-file-atomic/index.js\n");

/***/ })

};
;