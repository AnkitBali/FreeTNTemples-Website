"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/dot-prop";
exports.ids = ["vendor-chunks/dot-prop"];
exports.modules = {

/***/ "(ssr)/./node_modules/dot-prop/index.js":
/*!****************************************!*\
  !*** ./node_modules/dot-prop/index.js ***!
  \****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar isObj = __webpack_require__(/*! is-obj */ \"(ssr)/./node_modules/is-obj/index.js\");\nmodule.exports.get = function(obj, path) {\n    if (!isObj(obj) || typeof path !== \"string\") {\n        return obj;\n    }\n    var pathArr = getPathSegments(path);\n    for(var i = 0; i < pathArr.length; i++){\n        var descriptor = Object.getOwnPropertyDescriptor(obj, pathArr[i]) || Object.getOwnPropertyDescriptor(Object.prototype, pathArr[i]);\n        if (descriptor && !descriptor.enumerable) {\n            return;\n        }\n        obj = obj[pathArr[i]];\n        if (obj === undefined || obj === null) {\n            // `obj` is either `undefined` or `null` so we want to stop the loop, and\n            // if this is not the last bit of the path, and\n            // if it did't return `undefined`\n            // it would return `null` if `obj` is `null`\n            // but we want `get({foo: null}, 'foo.bar')` to equal `undefined` not `null`\n            if (i !== pathArr.length - 1) {\n                return undefined;\n            }\n            break;\n        }\n    }\n    return obj;\n};\nmodule.exports.set = function(obj, path, value) {\n    if (!isObj(obj) || typeof path !== \"string\") {\n        return;\n    }\n    var pathArr = getPathSegments(path);\n    for(var i = 0; i < pathArr.length; i++){\n        var p = pathArr[i];\n        if (!isObj(obj[p])) {\n            obj[p] = {};\n        }\n        if (i === pathArr.length - 1) {\n            obj[p] = value;\n        }\n        obj = obj[p];\n    }\n};\nmodule.exports[\"delete\"] = function(obj, path) {\n    if (!isObj(obj) || typeof path !== \"string\") {\n        return;\n    }\n    var pathArr = getPathSegments(path);\n    for(var i = 0; i < pathArr.length; i++){\n        var p = pathArr[i];\n        if (i === pathArr.length - 1) {\n            delete obj[p];\n            return;\n        }\n        obj = obj[p];\n    }\n};\nmodule.exports.has = function(obj, path) {\n    if (!isObj(obj) || typeof path !== \"string\") {\n        return false;\n    }\n    var pathArr = getPathSegments(path);\n    for(var i = 0; i < pathArr.length; i++){\n        obj = obj[pathArr[i]];\n        if (obj === undefined) {\n            return false;\n        }\n    }\n    return true;\n};\nfunction getPathSegments(path) {\n    var pathArr = path.split(\".\");\n    var parts = [];\n    for(var i = 0; i < pathArr.length; i++){\n        var p = pathArr[i];\n        while(p[p.length - 1] === \"\\\\\" && pathArr[i + 1] !== undefined){\n            p = p.slice(0, -1) + \".\";\n            p += pathArr[++i];\n        }\n        parts.push(p);\n    }\n    return parts;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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SUFBSyxJQUFJZCxJQUFJLEdBQUdBLElBQUlGLFFBQVFHLE1BQU0sRUFBRUQsSUFBSztRQUN4QyxJQUFJVSxJQUFJWixPQUFPLENBQUNFLEVBQUU7UUFFbEIsTUFBT1UsQ0FBQyxDQUFDQSxFQUFFVCxNQUFNLEdBQUcsRUFBRSxLQUFLLFFBQVFILE9BQU8sQ0FBQ0UsSUFBSSxFQUFFLEtBQUtPLFVBQVc7WUFDaEVHLElBQUlBLEVBQUVLLEtBQUssQ0FBQyxHQUFHLENBQUMsS0FBSztZQUNyQkwsS0FBS1osT0FBTyxDQUFDLEVBQUVFLEVBQUU7UUFDbEI7UUFFQWMsTUFBTUUsSUFBSSxDQUFDTjtJQUNaO0lBRUEsT0FBT0k7QUFDUiIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kb3QtcHJvcC9pbmRleC5qcz9iNzM0Il0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcbnZhciBpc09iaiA9IHJlcXVpcmUoJ2lzLW9iaicpO1xuXG5tb2R1bGUuZXhwb3J0cy5nZXQgPSBmdW5jdGlvbiAob2JqLCBwYXRoKSB7XG5cdGlmICghaXNPYmoob2JqKSB8fCB0eXBlb2YgcGF0aCAhPT0gJ3N0cmluZycpIHtcblx0XHRyZXR1cm4gb2JqO1xuXHR9XG5cblx0dmFyIHBhdGhBcnIgPSBnZXRQYXRoU2VnbWVudHMocGF0aCk7XG5cblx0Zm9yICh2YXIgaSA9IDA7IGkgPCBwYXRoQXJyLmxlbmd0aDsgaSsrKSB7XG5cdFx0dmFyIGRlc2NyaXB0b3IgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iaiwgcGF0aEFycltpXSkgfHwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihPYmplY3QucHJvdG90eXBlLCBwYXRoQXJyW2ldKTtcblx0XHRpZiAoZGVzY3JpcHRvciAmJiAhZGVzY3JpcHRvci5lbnVtZXJhYmxlKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0b2JqID0gb2JqW3BhdGhBcnJbaV1dO1xuXG5cdFx0aWYgKG9iaiA9PT0gdW5kZWZpbmVkIHx8IG9iaiA9PT0gbnVsbCkge1xuXHRcdFx0Ly8gYG9iamAgaXMgZWl0aGVyIGB1bmRlZmluZWRgIG9yIGBudWxsYCBzbyB3ZSB3YW50IHRvIHN0b3AgdGhlIGxvb3AsIGFuZFxuXHRcdFx0Ly8gaWYgdGhpcyBpcyBub3QgdGhlIGxhc3QgYml0IG9mIHRoZSBwYXRoLCBhbmRcblx0XHRcdC8vIGlmIGl0IGRpZCd0IHJldHVybiBgdW5kZWZpbmVkYFxuXHRcdFx0Ly8gaXQgd291bGQgcmV0dXJuIGBudWxsYCBpZiBgb2JqYCBpcyBgbnVsbGBcblx0XHRcdC8vIGJ1dCB3ZSB3YW50IGBnZXQoe2ZvbzogbnVsbH0sICdmb28uYmFyJylgIHRvIGVxdWFsIGB1bmRlZmluZWRgIG5vdCBgbnVsbGBcblx0XHRcdGlmIChpICE9PSBwYXRoQXJyLmxlbmd0aCAtIDEpIHtcblx0XHRcdFx0cmV0dXJuIHVuZGVmaW5lZDtcblx0XHRcdH1cblxuXHRcdFx0YnJlYWs7XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIG9iajtcbn07XG5cbm1vZHVsZS5leHBvcnRzLnNldCA9IGZ1bmN0aW9uIChvYmosIHBhdGgsIHZhbHVlKSB7XG5cdGlmICghaXNPYmoob2JqKSB8fCB0eXBlb2YgcGF0aCAhPT0gJ3N0cmluZycpIHtcblx0XHRyZXR1cm47XG5cdH1cblxuXHR2YXIgcGF0aEFyciA9IGdldFBhdGhTZWdtZW50cyhwYXRoKTtcblxuXHRmb3IgKHZhciBpID0gMDsgaSA8IHBhdGhBcnIubGVuZ3RoOyBpKyspIHtcblx0XHR2YXIgcCA9IHBhdGhBcnJbaV07XG5cblx0XHRpZiAoIWlzT2JqKG9ialtwXSkpIHtcblx0XHRcdG9ialtwXSA9IHt9O1xuXHRcdH1cblxuXHRcdGlmIChpID09PSBwYXRoQXJyLmxlbmd0aCAtIDEpIHtcblx0XHRcdG9ialtwXSA9IHZhbHVlO1xuXHRcdH1cblxuXHRcdG9iaiA9IG9ialtwXTtcblx0fVxufTtcblxubW9kdWxlLmV4cG9ydHMuZGVsZXRlID0gZnVuY3Rpb24gKG9iaiwgcGF0aCkge1xuXHRpZiAoIWlzT2JqKG9iaikgfHwgdHlwZW9mIHBhdGggIT09ICdzdHJpbmcnKSB7XG5cdFx0cmV0dXJuO1xuXHR9XG5cblx0dmFyIHBhdGhBcnIgPSBnZXRQYXRoU2VnbWVudHMocGF0aCk7XG5cblx0Zm9yICh2YXIgaSA9IDA7IGkgPCBwYXRoQXJyLmxlbmd0aDsgaSsrKSB7XG5cdFx0dmFyIHAgPSBwYXRoQXJyW2ldO1xuXG5cdFx0aWYgKGkgPT09IHBhdGhBcnIubGVuZ3RoIC0gMSkge1xuXHRcdFx0ZGVsZXRlIG9ialtwXTtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHRvYmogPSBvYmpbcF07XG5cdH1cbn07XG5cbm1vZHVsZS5leHBvcnRzLmhhcyA9IGZ1bmN0aW9uIChvYmosIHBhdGgpIHtcblx0aWYgKCFpc09iaihvYmopIHx8IHR5cGVvZiBwYXRoICE9PSAnc3RyaW5nJykge1xuXHRcdHJldHVybiBmYWxzZTtcblx0fVxuXG5cdHZhciBwYXRoQXJyID0gZ2V0UGF0aFNlZ21lbnRzKHBhdGgpO1xuXG5cdGZvciAodmFyIGkgPSAwOyBpIDwgcGF0aEFyci5sZW5ndGg7IGkrKykge1xuXHRcdG9iaiA9IG9ialtwYXRoQXJyW2ldXTtcblxuXHRcdGlmIChvYmogPT09IHVuZGVmaW5lZCkge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblx0fVxuXG5cdHJldHVybiB0cnVlO1xufTtcblxuZnVuY3Rpb24gZ2V0UGF0aFNlZ21lbnRzKHBhdGgpIHtcblx0dmFyIHBhdGhBcnIgPSBwYXRoLnNwbGl0KCcuJyk7XG5cdHZhciBwYXJ0cyA9IFtdO1xuXG5cdGZvciAodmFyIGkgPSAwOyBpIDwgcGF0aEFyci5sZW5ndGg7IGkrKykge1xuXHRcdHZhciBwID0gcGF0aEFycltpXTtcblxuXHRcdHdoaWxlIChwW3AubGVuZ3RoIC0gMV0gPT09ICdcXFxcJyAmJiBwYXRoQXJyW2kgKyAxXSAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0XHRwID0gcC5zbGljZSgwLCAtMSkgKyAnLic7XG5cdFx0XHRwICs9IHBhdGhBcnJbKytpXTtcblx0XHR9XG5cblx0XHRwYXJ0cy5wdXNoKHApO1xuXHR9XG5cblx0cmV0dXJuIHBhcnRzO1xufVxuIl0sIm5hbWVzIjpbImlzT2JqIiwicmVxdWlyZSIsIm1vZHVsZSIsImV4cG9ydHMiLCJnZXQiLCJvYmoiLCJwYXRoIiwicGF0aEFyciIsImdldFBhdGhTZWdtZW50cyIsImkiLCJsZW5ndGgiLCJkZXNjcmlwdG9yIiwiT2JqZWN0IiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwicHJvdG90eXBlIiwiZW51bWVyYWJsZSIsInVuZGVmaW5lZCIsInNldCIsInZhbHVlIiwicCIsImRlbGV0ZSIsImhhcyIsInNwbGl0IiwicGFydHMiLCJzbGljZSIsInB1c2giXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/dot-prop/index.js\n");

/***/ })

};
;