/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/imurmurhash";
exports.ids = ["vendor-chunks/imurmurhash"];
exports.modules = {

/***/ "(ssr)/./node_modules/imurmurhash/imurmurhash.js":
/*!*************************************************!*\
  !*** ./node_modules/imurmurhash/imurmurhash.js ***!
  \*************************************************/
/***/ ((module) => {

eval("/**\n * @preserve\n * JS Implementation of incremental MurmurHash3 (r150) (as of May 10, 2013)\n *\n * @author <a href=\"mailto:jensyt@gmail.com\">Jens Taylor</a>\n * @see http://github.com/homebrewing/brauhaus-diff\n * @author <a href=\"mailto:gary.court@gmail.com\">Gary Court</a>\n * @see http://github.com/garycourt/murmurhash-js\n * @author <a href=\"mailto:aappleby@gmail.com\">Austin Appleby</a>\n * @see http://sites.google.com/site/murmurhash/\n */ (function() {\n    var cache;\n    // Call this function without `new` to use the cached object (good for\n    // single-threaded environments), or with `new` to create a new object.\n    //\n    // @param {string} key A UTF-16 or ASCII string\n    // @param {number} seed An optional positive integer\n    // @return {object} A MurmurHash3 object for incremental hashing\n    function MurmurHash3(key, seed) {\n        var m = this instanceof MurmurHash3 ? this : cache;\n        m.reset(seed);\n        if (typeof key === \"string\" && key.length > 0) {\n            m.hash(key);\n        }\n        if (m !== this) {\n            return m;\n        }\n    }\n    ;\n    // Incrementally add a string to this hash\n    //\n    // @param {string} key A UTF-16 or ASCII string\n    // @return {object} this\n    MurmurHash3.prototype.hash = function(key) {\n        var h1, k1, i, top, len;\n        len = key.length;\n        this.len += len;\n        k1 = this.k1;\n        i = 0;\n        switch(this.rem){\n            case 0:\n                k1 ^= len > i ? key.charCodeAt(i++) & 0xffff : 0;\n            case 1:\n                k1 ^= len > i ? (key.charCodeAt(i++) & 0xffff) << 8 : 0;\n            case 2:\n                k1 ^= len > i ? (key.charCodeAt(i++) & 0xffff) << 16 : 0;\n            case 3:\n                k1 ^= len > i ? (key.charCodeAt(i) & 0xff) << 24 : 0;\n                k1 ^= len > i ? (key.charCodeAt(i++) & 0xff00) >> 8 : 0;\n        }\n        this.rem = len + this.rem & 3; // & 3 is same as % 4\n        len -= this.rem;\n        if (len > 0) {\n            h1 = this.h1;\n            while(1){\n                k1 = k1 * 0x2d51 + (k1 & 0xffff) * 0xcc9e0000 & 0xffffffff;\n                k1 = k1 << 15 | k1 >>> 17;\n                k1 = k1 * 0x3593 + (k1 & 0xffff) * 0x1b870000 & 0xffffffff;\n                h1 ^= k1;\n                h1 = h1 << 13 | h1 >>> 19;\n                h1 = h1 * 5 + 0xe6546b64 & 0xffffffff;\n                if (i >= len) {\n                    break;\n                }\n                k1 = key.charCodeAt(i++) & 0xffff ^ (key.charCodeAt(i++) & 0xffff) << 8 ^ (key.charCodeAt(i++) & 0xffff) << 16;\n                top = key.charCodeAt(i++);\n                k1 ^= (top & 0xff) << 24 ^ (top & 0xff00) >> 8;\n            }\n            k1 = 0;\n            switch(this.rem){\n                case 3:\n                    k1 ^= (key.charCodeAt(i + 2) & 0xffff) << 16;\n                case 2:\n                    k1 ^= (key.charCodeAt(i + 1) & 0xffff) << 8;\n                case 1:\n                    k1 ^= key.charCodeAt(i) & 0xffff;\n            }\n            this.h1 = h1;\n        }\n        this.k1 = k1;\n        return this;\n    };\n    // Get the result of this hash\n    //\n    // @return {number} The 32-bit hash\n    MurmurHash3.prototype.result = function() {\n        var k1, h1;\n        k1 = this.k1;\n        h1 = this.h1;\n        if (k1 > 0) {\n            k1 = k1 * 0x2d51 + (k1 & 0xffff) * 0xcc9e0000 & 0xffffffff;\n            k1 = k1 << 15 | k1 >>> 17;\n            k1 = k1 * 0x3593 + (k1 & 0xffff) * 0x1b870000 & 0xffffffff;\n            h1 ^= k1;\n        }\n        h1 ^= this.len;\n        h1 ^= h1 >>> 16;\n        h1 = h1 * 0xca6b + (h1 & 0xffff) * 0x85eb0000 & 0xffffffff;\n        h1 ^= h1 >>> 13;\n        h1 = h1 * 0xae35 + (h1 & 0xffff) * 0xc2b20000 & 0xffffffff;\n        h1 ^= h1 >>> 16;\n        return h1 >>> 0;\n    };\n    // Reset the hash object for reuse\n    //\n    // @param {number} seed An optional positive integer\n    MurmurHash3.prototype.reset = function(seed) {\n        this.h1 = typeof seed === \"number\" ? seed : 0;\n        this.rem = this.k1 = this.len = 0;\n        return this;\n    };\n    // A cached object to use. This can be safely used if you're in a single-\n    // threaded environment, otherwise you need to create new hashes to use.\n    cache = new MurmurHash3();\n    if (true) {\n        module.exports = MurmurHash3;\n    } else {}\n})();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/imurmurhash/imurmurhash.js\n");

/***/ })

};
;