/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/uuid";
exports.ids = ["vendor-chunks/uuid"];
exports.modules = {

/***/ "(ssr)/./node_modules/uuid/rng.js":
/*!**********************************!*\
  !*** ./node_modules/uuid/rng.js ***!
  \**********************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("var rb = (__webpack_require__(/*! crypto */ \"crypto\").randomBytes);\nmodule.exports = function() {\n    return rb(16);\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvdXVpZC9ybmcuanMiLCJtYXBwaW5ncyI6IkFBQUEsSUFBSUEsS0FBS0MseURBQTZCO0FBQ3RDRSxPQUFPQyxPQUFPLEdBQUc7SUFDZixPQUFPSixHQUFHO0FBQ1oiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvdXVpZC9ybmcuanM/N2UxOCJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgcmIgPSByZXF1aXJlKCdjcnlwdG8nKS5yYW5kb21CeXRlcztcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiByYigxNik7XG59O1xuIl0sIm5hbWVzIjpbInJiIiwicmVxdWlyZSIsInJhbmRvbUJ5dGVzIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/uuid/rng.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/uuid/uuid.js":
/*!***********************************!*\
  !*** ./node_modules/uuid/uuid.js ***!
  \***********************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("//     uuid.js\n//\n//     Copyright (c) 2010-2012 Robert Kieffer\n//     MIT License - http://opensource.org/licenses/mit-license.php\n// Unique ID creation requires a high quality random # generator.  We feature\n// detect to determine the best RNG source, normalizing to a function that\n// returns 128-bits of randomness, since that's what's usually required\nvar _rng = __webpack_require__(/*! ./rng */ \"(ssr)/./node_modules/uuid/rng.js\");\n// Maps for number <-> hex string conversion\nvar _byteToHex = [];\nvar _hexToByte = {};\nfor(var i = 0; i < 256; i++){\n    _byteToHex[i] = (i + 0x100).toString(16).substr(1);\n    _hexToByte[_byteToHex[i]] = i;\n}\n// **`parse()` - Parse a UUID into it's component bytes**\nfunction parse(s, buf, offset) {\n    var i = buf && offset || 0, ii = 0;\n    buf = buf || [];\n    s.toLowerCase().replace(/[0-9a-f]{2}/g, function(oct) {\n        if (ii < 16) {\n            buf[i + ii++] = _hexToByte[oct];\n        }\n    });\n    // Zero out remaining bytes if string was short\n    while(ii < 16){\n        buf[i + ii++] = 0;\n    }\n    return buf;\n}\n// **`unparse()` - Convert UUID byte array (ala parse()) into a string**\nfunction unparse(buf, offset) {\n    var i = offset || 0, bth = _byteToHex;\n    return bth[buf[i++]] + bth[buf[i++]] + bth[buf[i++]] + bth[buf[i++]] + \"-\" + bth[buf[i++]] + bth[buf[i++]] + \"-\" + bth[buf[i++]] + bth[buf[i++]] + \"-\" + bth[buf[i++]] + bth[buf[i++]] + \"-\" + bth[buf[i++]] + bth[buf[i++]] + bth[buf[i++]] + bth[buf[i++]] + bth[buf[i++]] + bth[buf[i++]];\n}\n// **`v1()` - Generate time-based UUID**\n//\n// Inspired by https://github.com/LiosK/UUID.js\n// and http://docs.python.org/library/uuid.html\n// random #'s we need to init node and clockseq\nvar _seedBytes = _rng();\n// Per 4.5, create and 48-bit node id, (47 random bits + multicast bit = 1)\nvar _nodeId = [\n    _seedBytes[0] | 0x01,\n    _seedBytes[1],\n    _seedBytes[2],\n    _seedBytes[3],\n    _seedBytes[4],\n    _seedBytes[5]\n];\n// Per 4.2.2, randomize (14 bit) clockseq\nvar _clockseq = (_seedBytes[6] << 8 | _seedBytes[7]) & 0x3fff;\n// Previous uuid creation time\nvar _lastMSecs = 0, _lastNSecs = 0;\n// See https://github.com/broofa/node-uuid for API details\nfunction v1(options, buf, offset) {\n    var i = buf && offset || 0;\n    var b = buf || [];\n    options = options || {};\n    var clockseq = options.clockseq !== undefined ? options.clockseq : _clockseq;\n    // UUID timestamps are 100 nano-second units since the Gregorian epoch,\n    // (1582-10-15 00:00).  JSNumbers aren't precise enough for this, so\n    // time is handled internally as 'msecs' (integer milliseconds) and 'nsecs'\n    // (100-nanoseconds offset from msecs) since unix epoch, 1970-01-01 00:00.\n    var msecs = options.msecs !== undefined ? options.msecs : new Date().getTime();\n    // Per 4.2.1.2, use count of uuid's generated during the current clock\n    // cycle to simulate higher resolution clock\n    var nsecs = options.nsecs !== undefined ? options.nsecs : _lastNSecs + 1;\n    // Time since last uuid creation (in msecs)\n    var dt = msecs - _lastMSecs + (nsecs - _lastNSecs) / 10000;\n    // Per 4.2.1.2, Bump clockseq on clock regression\n    if (dt < 0 && options.clockseq === undefined) {\n        clockseq = clockseq + 1 & 0x3fff;\n    }\n    // Reset nsecs if clock regresses (new clockseq) or we've moved onto a new\n    // time interval\n    if ((dt < 0 || msecs > _lastMSecs) && options.nsecs === undefined) {\n        nsecs = 0;\n    }\n    // Per 4.2.1.2 Throw error if too many uuids are requested\n    if (nsecs >= 10000) {\n        throw new Error(\"uuid.v1(): Can't create more than 10M uuids/sec\");\n    }\n    _lastMSecs = msecs;\n    _lastNSecs = nsecs;\n    _clockseq = clockseq;\n    // Per 4.1.4 - Convert from unix epoch to Gregorian epoch\n    msecs += 12219292800000;\n    // `time_low`\n    var tl = ((msecs & 0xfffffff) * 10000 + nsecs) % 0x100000000;\n    b[i++] = tl >>> 24 & 0xff;\n    b[i++] = tl >>> 16 & 0xff;\n    b[i++] = tl >>> 8 & 0xff;\n    b[i++] = tl & 0xff;\n    // `time_mid`\n    var tmh = msecs / 0x100000000 * 10000 & 0xfffffff;\n    b[i++] = tmh >>> 8 & 0xff;\n    b[i++] = tmh & 0xff;\n    // `time_high_and_version`\n    b[i++] = tmh >>> 24 & 0xf | 0x10; // include version\n    b[i++] = tmh >>> 16 & 0xff;\n    // `clock_seq_hi_and_reserved` (Per 4.2.2 - include variant)\n    b[i++] = clockseq >>> 8 | 0x80;\n    // `clock_seq_low`\n    b[i++] = clockseq & 0xff;\n    // `node`\n    var node = options.node || _nodeId;\n    for(var n = 0; n < 6; n++){\n        b[i + n] = node[n];\n    }\n    return buf ? buf : unparse(b);\n}\n// **`v4()` - Generate random UUID**\n// See https://github.com/broofa/node-uuid for API details\nfunction v4(options, buf, offset) {\n    // Deprecated - 'format' argument, as supported in v1.2\n    var i = buf && offset || 0;\n    if (typeof options == \"string\") {\n        buf = options == \"binary\" ? new Array(16) : null;\n        options = null;\n    }\n    options = options || {};\n    var rnds = options.random || (options.rng || _rng)();\n    // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`\n    rnds[6] = rnds[6] & 0x0f | 0x40;\n    rnds[8] = rnds[8] & 0x3f | 0x80;\n    // Copy bytes to buffer, if provided\n    if (buf) {\n        for(var ii = 0; ii < 16; ii++){\n            buf[i + ii] = rnds[ii];\n        }\n    }\n    return buf || unparse(rnds);\n}\n// Export public API\nvar uuid = v4;\nuuid.v1 = v1;\nuuid.v4 = v4;\nuuid.parse = parse;\nuuid.unparse = unparse;\nmodule.exports = uuid;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/uuid/uuid.js\n");

/***/ })

};
;